3.11 (Modifying Class GradeBook) Modify class GradeBook (Figs. 3.11–3.12) as follows:
a) Include a second string data member that represents the course instructor’s name.
b) Provide a set function to change the instructor’s name and a get function to retrieve it.
c) Modify the constructor to specify course name and instructor name parameters.
d) Modify function displayMessage to output the welcome message and course name,
then the string "This course is presented by: " followed by the instructor’s name.
Use your modified class in a test program that demonstrates the class’s new capabilities.

3.12 (Account Class) Create an Account class that a bank might use to represent customers’ bank
accounts. Include a data member of type int to represent the account balance. [Note: In subsequent
chapters, we’ll use numbers that contain decimal points (e.g., 2.75)—called floating-point values—
to represent dollar amounts.] Provide a constructor that receives an initial balance and uses it to initialize
the data member. The constructor should validate the initial balance to ensure that it’s greater
than or equal to 0. If not, set the balance to 0 and display an error message indicating that the initial
balance was invalid. Provide three member functions. Member function credit should add an
amount to the current balance. Member function debit should withdraw money from the Account
and ensure that the debit amount does not exceed the Account’s balance. If it does, the balance
should be left unchanged and the function should print a message indicating "Debit amount exceeded
account balance." Member function getBalance should return the current balance. Create a
program that creates two Account objects and tests the member functions of class Account.

3.13 (Invoice Class) Create a class called Invoice that a hardware store might use to represent
an invoice for an item sold at the store. An Invoice should include four data members—a part number
(type string), a part description (type string), a quantity of the item being purchased (type
int) and a price per item (type int). [Note: In subsequent chapters, we’ll use numbers that contain
decimal points (e.g., 2.75)—called floating-point values—to represent dollar amounts.] Your class
should have a constructor that initializes the four data members. Provide a set and a get function for
each data member. In addition, provide a member function named getInvoiceAmount that calculates
the invoice amount (i.e., multiplies the quantity by the price per item), then returns the
amount as an int value. If the quantity is not positive, it should be set to 0. If the price per item is
not positive, it should be set to 0. Write a test program that demonstrates class Invoice’s capabilities.

3.14 (Employee Class) Create a class called Employee that includes three pieces of information as
data members—a first name (type string), a last name (type string) and a monthly salary (type
int). [Note: In subsequent chapters, we’ll use numbers that contain decimal points (e.g., 2.75)—
called floating-point values—to represent dollar amounts.] Your class should have a constructor that
initializes the three data members. Provide a set and a get function for each data member. If the
monthly salary is not positive, set it to 0. Write a test program that demonstrates class Employee’s
capabilities. Create two Employee objects and display each object’s yearly salary. Then give each Employee
a 10 percent raise and display each Employee’s yearly salary again.

3.15 (Date Class) Create a class called Date that includes three pieces of information as data
members—a month (type int), a day (type int) and a year (type int). Your class should have a constructor
with three parameters that uses the parameters to initialize the three data members. For the
purpose of this exercise, assume that the values provided for the year and day are correct, but ensure
that the month value is in the range 1–12; if it isn’t, set the month to 1. Provide a set and a get function
for each data member. Provide a member function displayDate that displays the month, day
and year separated by forward slashes (/). Write a test program that demonstrates class Date’s capabilities.

1 // Fig. 3.11: GradeBook.h
2 // GradeBook class definition. This file presents GradeBook's public
3 // interface without revealing the implementations of GradeBook's member
4 // functions, which are defined in GradeBook.cpp.
5 #include <string> // class GradeBook uses C++ standard string class
6 using namespace std;
7
8
// GradeBook class definition
9 class GradeBook
10 {
11 public:
12
13
14
15
16 private:
17 string courseName; // course name for this GradeBook
18 }; // end class GradeBook

1 // Fig. 3.12: GradeBook.cpp
2 // GradeBook member-function definitions. This file contains
3 // implementations of the member functions prototyped in GradeBook.h.
4 #include <iostream>
56
using namespace std;
78
// constructor initializes courseName with string supplied as argument
9
10 {
11 setCourseName( name ); // call set function to initialize courseName
12 } // end GradeBook constructor
13
14 // function to set the course name
15
16 {
17 courseName = name; // store the course name in the object
18 } // end function setCourseName
19
20 // function to get the course name
21
22 {
23 return courseName; // return object's courseName
24 } // end function getCourseName
25
26 // display a welcome message to the GradeBook user
27
28 {
29 // call getCourseName to get the courseName
30 cout << "Welcome to the grade book for\n" << getCourseName()
31 << "!" << endl;
32 } // end function displayMessage
Fig. 3.12 | GradeBook member-function definitions


