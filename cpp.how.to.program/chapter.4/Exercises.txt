4.11 (Correct the Code Errors) Identify and correct the error(s) in each of the following:
a) if ( age >= 65 );
cout << "Age is greater than or equal to 65" << endl;
else
cout << "Age is less than 65 << endl";
b) if ( age >= 65 )
cout << "Age is greater than or equal to 65" << endl;
else;
cout << "Age is less than 65 << endl";
c) int x = 1, total;
while ( x <= 10 )
{
total += x;
++x;
}
d) While ( x <= 100 )
total += x;
++x;
e) while ( y > 0 )
{
cout << y << endl;
++y;
}

4.12 (What Does this Program Do?) What does the following program print?
Enter base as an integer: 2
Enter exponent as an integer: 3
8
1 // Exercise 4.12: ex04_12.cpp
2 // What does this program print?
3 #include <iostream>
4 using namespace std;
5
6 int main()
7 {
8 int y; // declare y
9 int x = 1; // initialize x
10 int total = 0; // initialize total
11
12 while ( x <= 10 ) // loop 10 times
13 {
14 y = x * x; // perform calculation
15 cout << y << endl; // output result
16 total += y; // add y to total
17 x++; // increment counter x
18 } // end while
19
20 cout << "Total is " << total << endl; // display result
21 } // end main

Exercises 145
For Exercises 4.13–4.16, perform each of these steps:
a) Read the problem statement.
b) Formulate the algorithm using pseudocode and top-down, stepwise refinement.
c) Write a C++ program.
d) Test, debug and execute the C++ program.
4.13 (Gas Mileage) Drivers are concerned with the mileage obtained by their automobiles. One
driver has kept track of several trips by recording miles driven and gallons used for each trip. Develop
a C++ program that uses a while statement to input the miles driven and gallons used for each
trip. The program should calculate and display the miles per gallon obtained for each trip and print
the combined miles per gallon obtained for all tankfuls up to this point.

Enter miles driven (-1 to quit): 287
Enter gallons used: 13
MPG this trip: 22.076923
Total MPG: 22.076923
Enter miles driven (-1 to quit): 200
Enter gallons used: 10
MPG this trip: 20.000000
Total MPG: 21.173913
Enter the miles driven (-1 to quit): 120
Enter gallons used: 5
MPG this trip: 24.000000
Total MPG: 21.678571


4.14 (Credit Limits) Develop a C++ program that will determine whether a department-store
customer has exceeded the credit limit on a charge account. For each customer, the following facts
are available:
a) Account number (an integer)
b) Balance at the beginning of the month
c) Total of all items charged by this customer this month
d) Total of all credits applied to this customer's account this month
e) Allowed credit limit
The program should use a while statement to input each of these facts, calculate the new balance
(= beginning balance + charges – credits) and determine whether the new balance exceeds the
customer’s credit limit. For those customers whose credit limit is exceeded, the program should display
the customer’s account number, credit limit, new balance and the message “Credit Limit
Exceeded.”

Enter account number (or -1 to quit): 100
Enter beginning balance: 5394.78
Enter total charges: 1000.00
Enter total credits: 500.00
Enter credit limit: 5500.00
New balance is 5894.78
Account: 100
Credit limit: 5500.00
Balance: 5894.78
Credit Limit Exceeded.
Enter Account Number (or -1 to quit): 200
Enter beginning balance: 1000.00
Enter total charges: 123.45
Enter total credits: 321.00
Enter credit limit: 1500.00
New balance is 802.45
Enter Account Number (or -1 to quit): -1




146 Chapter 4 Control Statements: Part 1
4.15 (Sales Commission Calculator) A large company pays its salespeople on a commission basis.
The salespeople each receive $200 per week plus 9% of their gross sales for that week. For example,
a salesperson who sells $5000 worth of chemicals in a week receives $200 plus 9% of $5000, or a
total of $650. Develop a C++ program that uses a while statement to input each salesperson’s gross
sales for last week and calculates and displays that salesperson’s earnings. Process one salesperson’s
figures at a time..

Enter sales in dollars (-1 to end): 5000.00
Salary is: $650.00
Enter sales in dollars (-1 to end): 6000.00
Salary is: $740.00
Enter sales in dollars (-1 to end): 7000.00
Salary is: $830.00
Enter sales in dollars (-1 to end): -1

4.16 (Salary Calculator) Develop a C++ program that uses a while statement to determine the
gross pay for each of several employees. The company pays “straight time” for the first 40 hours
worked by each employee and pays “time-and-a-half” for all hours worked in excess of 40 hours.
You are given a list of the employees of the company, the number of hours each employee worked
last week and the hourly rate of each employee. Your program should input this information for
each employee and should determine and display the employee’s gross pay.

Enter hours worked (-1 to end): 39
Enter hourly rate of the employee ($00.00): 10.00
Salary is $390.00
Enter hours worked (-1 to end): 40
Enter hourly rate of the employee ($00.00): 10.00
Salary is $400.00
Enter hours worked (-1 to end): 41
Enter hourly rate of the employee ($00.00): 10.00
Salary is $415.00
Enter hours worked (-1 to end): -1

Exercises 147
4.17 (Find the Largest) The process of finding the largest number (i.e., the maximum of a group
of numbers) is used frequently in computer applications. For example, a program that determines
the winner of a sales contest inputs the number of units sold by each salesperson. The salesperson
who sells the most units wins the contest. Write a C++ program that uses a while statement to determine
and print the largest number of 10 numbers input by the user. Your program should use
three variables, as follows:
counter: A counter to count to 10 (i.e., to keep track of how many numbers have
been input and to determine when all 10 numbers have been processed).
number: The current number input to the program.
largest: The largest number found so far.



4.18 (Tabular Output) Write a C++ program that uses a while statement and the tab escape sequence
\t to print the following table of values:

N 10*N 100*N 1000*N
1 10 100 1000
2 20 200 2000
3 30 300 3000
4 40 400 4000
5 50 500 5000

4.19 (Find the Two Largest Numbers) Using an approach similar to that in Exercise 4.17, find
the two largest values among the 10 numbers. [Note: You must input each number only once.]
4.20 (Validating User Input) The examination-results program of Fig. 4.16 assumes that any value
input by the user that’s not a 1 must be a 2. Modify the application to validate its inputs. On any
input, if the value entered is other than 1 or 2, keep looping until the user enters a correct value.
4.21 (What Does this Program Do?) What does the following program print?.

1 // Exercise 4.21: ex04_21.cpp
2 // What does this program print?
3 #include <iostream>
4 using namespace std;
5
6 int main()
7 {
8 int count = 1; // initialize count
9
10 while ( count <= 10 ) // loop 10 times
11 {
12 // output line of text
13 cout << ( count % 2 ? "****" : "++++++++" ) << endl;
14 ++count; // increment count
15 } // end while
16 } // end main

4.22 (What Does this Program Do?) What does the following program print?


1 // Exercise 4.22: ex04_22.cpp
2 // What does this program print?
3 #include <iostream>
4 using namespace std;
5
6 int main()
7 {
8 int row = 10; // initialize row
9 int column; // declare column
10
11 while ( row >= 1 ) // loop until row < 1
12 {
13 column = 1; // set column to 1 as iteration begins
14
15 while ( column <= 10 ) // loop 10 times
16 {
17 cout << ( row % 2 ? "<" : ">" ); // output
18 ++column; // increment column
19 } // end inner while
20
21 --row; // decrement row
22 cout << endl; // begin new output line
23 } // end outer while
24 } // end main


148 Chapter 4 Control Statements: Part 1
4.23 (Dangling-else Problem) State the output for each of the following when x is 9 and y is 11
and when x is 11 and y is 9. The compiler ignores the indentation in a C++ program. The C++ compiler
always associates an else with the previous if unless told to do otherwise by the placement of
braces {}. On first glance, you may not be sure which if and else match, so this is referred to as
the “dangling-else” problem. We eliminated the indentation from the following code to make the
problem more challenging. [Hint: Apply indentation conventions you’ve learned.]
a) if ( x < 10 )
if ( y > 10 )
cout << "*****" << endl;
else
cout << "#####" << endl;
cout << "$$$$$" << endl;
b) if ( x < 10 )
{
if ( y > 10 )
cout << "*****" << endl;
}
else
{
cout << "#####" << endl;
cout << "$$$$$" << endl;
}


4.24 (Another Dangling-else Problem) Modify the following code to produce the output shown.
Use proper indentation techniques. You must not make any changes other than inserting braces.
The compiler ignores indentation in a C++ program. We eliminated the indentation from the following
code to make the problem more challenging. [Note: It’s possible that no modification is necessary.]
if ( y == 8 )
if ( x == 5 )
cout << "@@@@@" << endl;
else
cout << "#####" << endl;
cout << "$$$$$" << endl;
cout << "&&&&&" << endl;


Exercises 149
a) Assuming x = 5 and y = 8, the following output is produced.
@@@@@
$$$$$
&&&&&
b) Assuming x = 5 and y = 8, the following output is produced.
@@@@@
c) Assuming x = 5 and y = 8, the following output is produced.
@@@@@
&&&&&
d) Assuming x = 5 and y = 7, the following output is produced. [Note: The last three output
statements after the else are all part of a block.]
#####
$$$$$
&&&&&

4.25 (Square of Asterisks) Write a program that reads in the size of the side of a square then prints
a hollow square of that size out of asterisks and blanks. Your program should work for squares of all
side sizes between 1 and 20. For example, if your program reads a size of 5, it should print
*****
*    *
*    *
*    *
*****

4.26 (Palindromes) A palindrome is a number or a text phrase that reads the same backward as
forward. For example, each of the following five-digit integers is a palindrome: 12321, 55555,
45554 and 11611. Write a program that reads in a five-digit integer and determines whether it’s a
palindrome. [Hint: Use the division and modulus operators to separate the number into its individual
digits.]
4.27 (Printing the Decimal Equivalent of a Binary Number) Input an integer containing only 0s
and 1s (i.e., a “binary” integer) and print its decimal equivalent. Use the modulus and division operators
to pick off the “binary” number’s digits one at a time from right to left. Much as in the decimal
number system, where the rightmost digit has a positional value of 1, the next digit left has a
positional value of 10, then 100, then 1000, and so on, in the binary number system the rightmost
digit has a positional value of 1, the next digit left has a positional value of 2, then 4, then 8, and so
on. Thus the decimal number 234 can be interpreted as 2 * 100 + 3 * 10 + 4 * 1. The decimal equivalent
of binary 1101 is 1 * 1 + 0 * 2 + 1 * 4 + 1 * 8 or 1 + 0 + 4 + 8, or 13. [Note: To learn more
about binary numbers, refer to Appendix D.]
4.28 (Checkerboard Pattern of Asterisks) Write a program that displays the following checkerboard
pattern. Your program must use only three output statements, one of each of the following
forms:
cout << "* ";
cout << ' ';
cout << endl;


* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *








4.29 (Multiples of 2 with an Infinite Loop) Write a program that prints the powers of the integer
2, namely 2, 4, 8, 16, 32, 64, etc. Your while loop should not terminate (i.e., you should create an
infinite loop). To do this, simply use the keyword true as the expression for the while statement.
What happens when you run this program?
4.30 (Calculating a Circle’s Diameter, Circumference and Area) Write a program that reads the
radius of a circle (as a double value) and computes and prints the diameter, the circumference and
the area. Use the value 3.14159 for p.
4.31 What’s wrong with the following statement? Provide the correct statement to accomplish
what the programmer was probably trying to do.
cout << ++( x + y );
4.32 (Sides of a Triangle) Write a program that reads three nonzero double values and determines
and prints whether they could represent the sides of a triangle.
4.33 (Sides of a Right Triangle) Write a program that reads three nonzero integers and determines
and prints whether they’re the sides of a right triangle.
4.34 (Factorial) The factorial of a nonnegative integer n is written n! (pronounced “n factorial”)
and is defined as follows:
n! = n · (n – 1) · (n – 2) · … · 1 (for values of n greater than 1)
and
n! = 1 (for n = 0 or n = 1).
For example, 5! = 5 · 4 · 3 · 2 · 1, which is 120. Use while statements in each of the following:
a) Write a program that reads a nonnegative integer and computes and prints its factorial.
b) Write a program that estimates the value of the mathematical constant e by using the
formula:
e 1
1
1!
----
1
2!
----
1
3!
= + + + ---- + …

Prompt the user for the desired accuracy of e (i.e., the number of terms in the summation).
c) Write a program that computes the value of ex by using the formula
ex 1
x
1!
----
x2
2!
----
x3
3!
= + + + ---- + …

